#MSSQL Backup


#ScriptConfig
$serverName = "test"; #Nazwa serwera.
$recipimentList = ""; #Lista odbiorców powiadomień na temat backupów.
$senderMail = ""; #Mail nadawcy dla serwera SMTP.
$senderUser = ""; #Użytkownik serwera SMTP.
$senderPasswd = ""; #Hasło użytkownika do serwera SMTP.
$senderServer = ""; #Adres serwera SMTP.
$senderServerPort = ""; #Port serwera SMTP.
$senderServerSSL = $true; #Czy serwer SMTP korzysta z SSL?
$backupLocalLocation = "C:\Users\Administrator\Documents\Backup\backup_tmp"; #Scieżka do folderu z lokalnymi backupami. Scieżka nie może kończyć się ukośnikiem.
$backupLocalLocationLost = "C:\Users\Administrator\Documents\Backup\backup"; #Scieżka do folderu z lokalnymi backupami które nie zostały wysłane na serwer. Scieżka nie może kończyć się ukośnikiem.
$backupLocalFilename = "backup_{0}_{1}.bak"; #Nazwa lokalnego pliku kopii zapasowej
$backupLocalFilenameGZiped = "backup_{0}_{1}.7z"; #Nazwa lokalnego pliku kopii zapasowej po kompresji
$logFileLocation = "C:\Users\Administrator\Documents\Backup\backup_logs"; #Scieżka do folderu z logami. Scieżka nie może kończyć się ukośnikiem.
$logFilename = "log_{0}.txt"; #Nazwa pliku z logiem.
$backupRemoteLocationRoot = "\\localhost\Bak\Backup"; #Scieżka do udziału sieciowego SMB.
$backupRemoteLocationDataBase = "backupMSSQL"; #Podfolder w udziale SMB zdefiniowanym w zmiennej "backupRemoteLocationRoot", gdzie będą umieszczane kopie baz danych wraz z logiem.
$daysToKeep = 2; #Ile dni jest trzymana kopia zapasowa.
$daysToKeepLog = 3; #Ile dni są trzymane logi kopii zapasowej.

#Autogenerated vars. Don't change anything!!
$startDT = Get-Date;
$startTimeDate = Get-Date -format "dd-MM-yyyy+HH-mm-ss"; #Format daty używany w nazwach plików.
$logFilenamePath = Join-Path -Path $logFileLocation -ChildPath ($logFilename -f $startTimeDate);
$backupRemoteLocationPath = Join-Path -Path $backupRemoteLocationRoot -ChildPath $backupRemoteLocationDataBase;
$backupRemoteLocationPathFull = Join-Path -Path $backupRemoteLocationPath -ChildPath ("backup_{0}" -f $startTimeDate);
$backupLocalLocationLostPath = Join-Path -Path $backupLocalLocationLost -ChildPath ("backup_{0}" -f $startTimeDate);

#Objects
$mailLog = New-Object Collections.ArrayList;
$global:skipLogFile = $false;
$removeTmp = $false;
$global:errLvl2 = 0;
$global:errLvl3 = 0;

#Mail template
#Szablon maila z powiadomieniem
$mailTemplate = @"
<!doctype HTML><html><head><meta charset="utf-8"/></head><body>
<h1>Creating backup of {0}</h1>
<h2>Backup start time: {1}</h2>
<p>Warmings: {3}</p>
<p>Errors: {4}</p>
<p>Complete backup log is available in attachment and on the servers. Here is short log:</p>
</hr>
<p>{2}</p>
</body></html>
"@

#Assembly load
$smo = [System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SqlServer.SMO");
if($smo.Getname().Version.Major -ge 10){
    [System.Reflection.Assembly]::LoadWithPartialName("Microsoft.SqlServer.SmoExtended") | Out-Null;
}

#Functions
function Write-Log([string]$msg, [bool]$toMail, [int]$level, [bool]$noConsole){
    $dateTime = Get-Date -format "dd-MM-yyyy +HH:mm:ss"; #Format daty używany w logach. Może być dowolny.
    $out = "[{0}]: {1}" -f $dateTime, $msg;
    $out1 = "[{0}]: <span style='color: black;'>{1}</span>" -f $dateTime, $msg;
    $out2 = "[{0}]: <span style='color: yellow; background-color: black;'>{1}</span>" -f $dateTime, $msg;
    $out3 = "[{0}]: <span style='color: red;'>{1}</span>" -f $dateTime, $msg;
    
    if($noConsole -ne $null){
        if($noConsole -eq $false){
            Write-Output $out;
        }
    }
    
    if($global:skipLogFile -eq $false){
        if(-Not (Test-Path $logFilenamePath)){
            try{
                New-Item -Force -Path $logFilenamePath -Type File -ErrorAction Stop | Out-Null;
                Write-Log "Created logfile" -toMail $false -level 3;
            }
            catch {
                $global:skipLogFile = $true;
                Write-Log "Failed to create logfile" -toMail $false -level 3;
            }
        }
        
    }
    if($global:skipLogFile -eq $false){
        Add-Content -Path $logFilenamePath -Value $out;
    }
    
    if($toMail -ne $null){
        #Levels:
        #1 - Normal
        #2 - Warning
        #3 - Error
        if($tomail -eq $true){
            if($level -ne $null){
                Switch($level){
                    1{
                        $mailLog.Add($out1) | Out-Null;
                    }
                    2{
                        $mailLog.Add($out2) | Out-Null;
                        $global:errLvl2++;
                    }
                    3{
                        $mailLog.Add($out3) | Out-Null;
                        $global:errLvl3++;
                    }
                    default{
                        $mailLog.Add($out) | Out-Null;
                    }
                }
            }
            else {
                $mailLog.Add($out) | Out-Null;
            }
        }
    }
}


function SendMail([string[]]$recipients, [string]$subject, [string]$body, [string]$attachment, [bool]$bodyhtml){
    $msg = New-Object Net.Mail.MailMessage;
    $msg.From = $senderMail;
    if($recipient -ne $null){
        $msg.To.Add($recipient);
    }
    if($recipients -ne $null){
        foreach($r in $recipients){
            $msg.Bcc.Add($r);
        }
    }
    $msg.Subject = $subject;
    $msg.Body = $body;
    $msg.IsBodyHtml = $bodyhtml;
    $attachmentObject = $null;
    if($attachment -ne $null){
        if(-Not (Test-Path $attachment)){
            $attachment = $null;
        }
        else {
            $attachmentObject = New-Object Net.Mail.Attachment($attachment);
            $msg.Attachments.Add($attachmentObject);
        }
    }
    
    $smtp = New-Object Net.Mail.SmtpClient($senderServer, $senderServerPort);
    $smtp.EnableSSL = $senderServerSSL;
    $credentials = New-Object Net.NetworkCredential($senderUser, $senderPasswd);
    $smtp.Credentials = $credentials;
    
    Try{
        $smtp.send($msg);
    }
    Catch{
        if($attachmentObject -ne $null){
            $attachmentObject.Dispose();
        }
        Write-Log "Mail sending error!";
        Write-Log $_.Exception.Message;
        return;
    }
    
    if($attachmentObject -ne $null){
        $attachmentObject.Dispose();
    }
    Write-Log "Mail sended succeslly!";
}

#Begin of script
Write-Log "Backup of MSSQL Started." -toMail $true;

#Check for 7-zip
if(-not (Test-Path "$env:ProgramFiles\7-Zip\7z.exe")) {
    Write-Log "7zip not found in Program Files directory." -toMail $true -level 2;
    $is7ZipInstalled = $false;
}
else {
    Write-Log "7zip found in Program Files." -toMail $true;
    
    #Assign 7zip allias
    Set-Alias sz "$env:ProgramFiles\7-Zip\7z.exe";
    $is7ZipInstalled = $true;
}

#Create local folder for backup
if(-Not (Test-Path $backupLocalLocation)){
    try{
        New-Item -Path $backupLocalLocation -Type Directory -ErrorAction Stop -Force | Out-Null;
        Write-Log ("Created {0} directory" -f $backupLocalLocation) -toMail $true
        $tmpDirOk = $true;
    }
    catch {
        Write-Log "Cannot create local directory for backup. Aborting." -toMail $true -level 3;
        $tmpDirOk = $false;
    }
}
else {
	$tmpDirOk = $true;
}

if($tmpDirOk -eq $true){
    #Get local instances of datebase and create local backup
    $dbInstances = (Get-Itemproperty "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server").InstalledInstances;
    if($dbInstances){
        foreach($i in $dbInstances){
            $i = $i.ToUpper();
            $cmpName = $env:COMPUTERNAME;
            if($i -eq "MSSQLSERVER")
            {
                $instance = $cmpName;
            }
            else 
            {
                $instance = "{0}\{1}" -f $cmpName, $i;
            }
            Write-Log ("Backuping instance: {0}" -f $instance) -toMail $true;
            
            $instanceDb = New-Object Microsoft.SqlServer.Management.Smo.Server $instance;
            $dbs = $instanceDb.Databases;
            foreach($db in $dbs){
                if(($db.Name.ToString()) -ne "tempdb"){
                    Write-Log ("Backuping database: {0}\{1}" -f $instance, $db.Name) -toMail $true;
                    $backupPath = Join-Path -Path $backupLocalLocation -ChildPath ($backupLocalFilename -f $db.Name, $startTimeDate);
                    $backup = New-Object Microsoft.SqlServer.Management.Smo.Backup;
                    $backup.Action = [Microsoft.SqlServer.Management.Smo.BackupActionType]::Database;
                    $backup.BackupSetName = "backup_{0}_{1}" -f $db.Name, $startTimeDate;
                    $backup.Database = $db.Name;
                    $backup.MediaDescription = "Disk";
					$backupPath;
                    $backup.Devices.AddDevice($backupPath, "File");
                    try{
                        Write-Log ("Database {0}\{1} backup started" -f $instance, $db.Name) -toMail $true;
                        $backup.SqlBackup($instanceDb);
                        Write-Log ("Database {0}\{1} backup finished" -f $instance, $db.Name) -toMail $true;
                    }
                    catch{
                        Write-Log ("Database {0}\{1} backup failed" -f $instance, $db.Name) -toMail $true -level 3;
                        Write-Log ("Error: {0}" -f $_.Exception) -toMail $true -level 3;
                    }
                }
            }
        }
    }
    else {
        Write-Log "There is not MSSQL server installed on this machine. Fatal error." -toMail $true -level 3;
    }

    if($is7ZipInstalled -eq $true){
        #Compress all .bak files into one 7zip archive
        $filesToCompress = Get-ChildItem -Recurse -Path $backupLocalLocation | Where-Object { $_.Extension -eq ".bak" }
        foreach($f in $filesToCompress){
            $dir = $f.DirectoryName;
            $zip = $f.Name.Replace(".bak", ".7z");
            $output = (sz a -t7z ("{0}\{1}" -f $dir, $zip) ("{0}\{1}" -f $dir, $f.Name)) | Out-String;
             Write-Log ("Compressed {0} into {1}" -f $f.Name, $zip) -toMail $true;
             Write-Log $output -noConsole $true;
        }
    }
    else {
        Write-Log "Omiting compression. 7Zip is not installed. Non compressed files will be sended." -toMail $true -level 2;
    }

    #Sending backup to server
    if(-Not (Test-Path $backupRemoteLocationPathFull)){
        try{
            New-Item -Path $backupRemoteLocationPathFull -Type Directory -ErrorAction Stop | Out-Null;
            Write-Log ("Created {0} directory" -f $backupRemoteLocationPathFull) -toMail $true;
            $remoteServerOk = $true;
        }
        catch {
            Write-Log ("Creating {0} directory failed. Is remote server is ok?" -f $backupRemoteLocationPathFull) -toMail $true -level 2;
            $remoteServerOk = $false;
        }
    }

    if($remoteServerOk -eq $true){
        #Upload to remote server
        Write-Log "Moving backup to remote machine" -toMail $true;
       
        #Get files and copy
        Write-Log "Copping files to remote machine." -toMail $true;
        if($is7ZipInstalled -eq $true){
            $strTmp = "{0}\*.7z" -f $backupLocalLocation;
        }
        else {
            $strTmp = "{0}\*.bak" -f $backupLocalLocation;
        }
        try{
            Copy-Item $strTmp $backupRemoteLocationPathFull;
            Write-Log "Copy ok!" -toMail $true;
            $removeTmp = $true;
        }
        catch{
            Write-Log "Copy fail!" -toMail $true -level 3;
        }  
    }
    if($remoteServerOk -eq $false){
        #Move to lost directory
        Write-Log "Moving backup to lost backup directory on local machine" -toMail $true -level 2;
        
        #Create local folder for backup
        if(-Not (Test-Path $backupLocalLocationLostPath)){
            try{
                New-Item -Path $backupLocalLocationLostPath -Type Directory -ErrorAction Stop | Out-Null;
                Write-Log ("Created {0} directory" -f $backupLocalLocationLostPath) -toMail $true
                $lostDirOk = $true;
            }
            catch {
                Write-Log "Cannot create local directory for lost backup. Aborting." -toMail $true -level 3;
                Write-Log "Cannot create backup. Backup can be in tmp folder." -toMail $true -level 3;
                $lostDirOk = $false;
            }
        }
        if($lostDirOk -eq $true){
            #Get files and copy
            Write-Log "Copping files to lost backup directory." -toMail $true;
            if($is7ZipInstalled -eq $true){
                $strTmp = "{0}\*.7z" -f $backupLocalLocation;
            }
            else {
                $strTmp = "{0}\*.bak" -f $backupLocalLocation;
            }
            try{
                Copy-Item $strTmp $backupLocalLocationLostPath;
                Write-Log "Copy ok!" -toMail $true;
            }
            catch{
                Write-Log "Copy fail!" -toMail $true -level 3;
            }
            
        }
    }

    if($removeTmp -eq $true){
        #Remove all files with .7z and .bak extension from tmp directory
        $filesToRemove = Get-ChildItem -Recurse -Path $backupLocalLocation | Where-Object { $_.Extension -eq ".bak" -or $_.Extension -eq ".7z" }
        foreach($f in $filesToRemove){
            Remove-Item $f.Fullname -Force;
            Write-Log ("Removed {0} from local drive" -f $f.name);
        }
        $dirBackupLocal = Get-Item $backupLocalLocation;
        if($dirBackupLocal.GetFiles().Count -eq 0){
            Remove-Item $backupLocalLocation -Confirm:$false -ErrorAction SilentlyContinue;
            Write-Log ("Removed {0} directory" -f $backupLocalLocation) -toMail $true
        }
    }
    else {
        Write-Log "Backup will be uploaded on next run!" -toMail $true -level 3;
    }
}

#Remove old backups
if($remoteServerOk -eq $true){
	Write-Log "Removing old backups" -toMail $true;
	$dirs = Get-ChildItem -Directory -Path $backupRemoteLocationPath;
	foreach($d in $dirs){
		#Example directory name "backup_30-06-2017+10-54-17"
		if($d -match "backup_[0-9]{2}-[0-9]{2}-[0-9]{4}\+[0-9]{2}-[0-9]{2}-[0-9]{2}"){
			[regex]$rx = "[0-9]{2}";
			$val = $rx.Matches($d).Value;
			$day = [Convert]::ToInt32($val[0]);
			$mth = [Convert]::ToInt32($val[1]);
			$yer = [Convert]::ToInt32($val[2]) * 100 + [Convert]::ToInt32($val[3]);
			$h = [Convert]::ToInt32($val[4]);
			$m = [Convert]::ToInt32($val[5]);
			$s = [Convert]::ToInt32($val[6]);
			Write-Log ("Found backup named: {0} from {1:00}/{2:00}/{3:0000} +T{4:00}:{5:00}:{6:00}" -f $d, $day, $mth, $yer, $h, $m, $s) -toMail $true;

			$dt = New-Object DateTime $yer, $mth, $day, $h, $m, $s;
			$timeDiff = New-Timespan -Start $dt -End $startDT;
			if($timeDiff.TotalDays -gt $daysToKeep){
				Write-Log "Removing old backup.." -toMail $true;
				Remove-Item (Join-Path -Path $backupRemoteLocationPath -ChildPath $d) -Recurse -Confirm:$false -ErrorAction SilentlyContinue;;
			}
			else {
				Write-Log "Keeping backup." -toMail $true;
			}
		}
	}
}

#Remove old logs
Write-Log "Removing old logs" -toMail $true;
$logs = Get-ChildItem -File -Path $logFileLocation;
foreach($l in $logs){
	#Example directory name "log_30-06-2017+10-54-17"
	if($l -match "log_[0-9]{2}-[0-9]{2}-[0-9]{4}\+[0-9]{2}-[0-9]{2}-[0-9]{2}"){
		[regex]$rx = "[0-9]{2}";
		$val = $rx.Matches($l).Value;
		$day = [Convert]::ToInt32($val[0]);
		$mth = [Convert]::ToInt32($val[1]);
		$yer = [Convert]::ToInt32($val[2]) * 100 + [Convert]::ToInt32($val[3]);
		$h = [Convert]::ToInt32($val[4]);
		$m = [Convert]::ToInt32($val[5]);
		$s = [Convert]::ToInt32($val[6]);
		Write-Log ("Found log named: {0} from {1:00}/{2:00}/{3:0000} +T{4:00}:{5:00}:{6:00}" -f $l, $day, $mth, $yer, $h, $m, $s) -toMail $true;

		$dt = New-Object DateTime $yer, $mth, $day, $h, $m, $s;
		$timeDiff = New-Timespan -Start $dt -End $startDT;
		if($timeDiff.TotalDays -gt $daysToKeepLog){
			Write-Log "Removing old log.." -toMail $true;
			Remove-Item (Join-Path -Path $logFileLocation -ChildPath $l) -Confirm:$false -ErrorAction SilentlyContinue;;
		}
		else {
			Write-Log "Keeping log file." -toMail $true;
		}
	}
}

#End of script
Write-Log "Backup Script for MSSQL Ended. Now Sending Mail." -toMail $true;
SendMail -recipients $recipimentList -subject ("Backup of {0} on {1} (E: {2}; W: {3})" -f $serverName, $startTimeDate, $global:errLvl2, $global:errLvl3) -body ($mailTemplate -f $serverName, $startTimeDate, ($mailLog -join "</br>"), $errLvl2, $errLvl3) -attachment $logFilenamePath -bodyhtml $true
Exit 0;
